name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

jobs:
  test:
    name: Build and Test
    runs-on: ${{ matrix.os }}
    
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        build_type: [Debug, Release]
        include:
          - os: ubuntu-latest
            cc: gcc
            cxx: g++
          - os: macos-latest
            cc: clang
            cxx: clang++
          - os: windows-latest
            cc: cl
            cxx: cl

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup C++ environment
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y cmake build-essential libboost-all-dev

    - name: Install dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install cmake boost

    - name: Install dependencies (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        choco install cmake
        vcpkg install boost:x64-windows

    - name: Configure CMake
      run: |
        cmake -B build -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DBUILD_TESTING=ON

    - name: Build
      run: |
        cmake --build build --config ${{ matrix.build_type }} --parallel

    - name: Run Tests
      run: |
        cd build
        ctest --build-config ${{ matrix.build_type }} --output-on-failure --parallel

    - name: Run Examples
      run: |
        cd build
        ./examples/basic_example || ./examples/basic_example.exe
        ./examples/buffer_operations || ./examples/buffer_operations.exe

  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y cmake build-essential libboost-all-dev cppcheck clang-tidy

    - name: Run cppcheck
      run: |
        cppcheck --enable=all --error-exitcode=1 --suppress=missingIncludeSystem \
          --suppress=unusedFunction --suppress=unmatchedSuppression \
          *.cpp *.h examples/*.cpp tests/*.cpp

    - name: Configure for clang-tidy
      run: |
        cmake -B build -DCMAKE_BUILD_TYPE=Debug -DCMAKE_EXPORT_COMPILE_COMMANDS=ON

    - name: Run clang-tidy
      run: |
        clang-tidy -p build --config-file=.clang-tidy \
          Buffer.cpp Random32.cpp Utils.cpp CompareResult.cpp \
          examples/*.cpp tests/*.cpp || true

  documentation:
    name: Build Documentation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y doxygen graphviz

    - name: Generate documentation
      run: |
        doxygen Doxyfile || echo "Doxygen config not found, skipping"

    - name: Upload documentation
      if: github.ref == 'refs/heads/main'
      uses: actions/upload-artifact@v4
      with:
        name: documentation
        path: docs/

  release:
    name: Create Release Artifacts
    runs-on: ubuntu-latest
    needs: [test, code-quality]
    if: github.event_name == 'release'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y cmake build-essential libboost-all-dev

    - name: Build Release
      run: |
        cmake -B build -DCMAKE_BUILD_TYPE=Release
        cmake --build build --parallel

    - name: Package library
      run: |
        cd build
        cpack || echo "CPack not configured"

    - name: Create source archive
      run: |
        git archive --format=tar.gz --prefix=BufferLib-${{ github.ref_name }}/ HEAD > BufferLib-${{ github.ref_name }}-source.tar.gz

    - name: Upload release assets
      uses: actions/upload-artifact@v4
      with:
        name: release-artifacts
        path: |
          BufferLib-*.tar.gz
          build/libbuffer.a 