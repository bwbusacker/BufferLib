name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

jobs:
  test:
    name: Build and Test
    runs-on: ${{ matrix.os }}
    
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        build_type: [Debug, Release]
        include:
          - os: ubuntu-latest
            cc: gcc
            cxx: g++
          - os: macos-latest
            cc: clang
            cxx: clang++

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup C++ environment
      shell: bash
      run: echo "Setting up C++ build environment"

    - name: Install dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y cmake build-essential
        # Install comprehensive boost packages with all components we need
        sudo apt-get install -y libboost-all-dev || {
          echo "libboost-all-dev failed, trying comprehensive individual packages..."
          sudo apt-get install -y \
            libboost-dev \
            libboost-thread-dev \
            libboost-system-dev \
            libboost-random-dev \
            libboost-format-dev \
            libboost-filesystem-dev
        }
        echo "Boost installation completed"
        dpkg -l | grep boost
        # Check for boost headers we actually use
        echo "Checking for required boost headers:"
        ls -la /usr/include/boost/thread/mutex.hpp 2>/dev/null && echo "✅ boost/thread/mutex.hpp found" || echo "❌ boost/thread/mutex.hpp missing"
        ls -la /usr/include/boost/format.hpp 2>/dev/null && echo "✅ boost/format.hpp found" || echo "❌ boost/format.hpp missing"  
        ls -la /usr/include/boost/random.hpp 2>/dev/null && echo "✅ boost/random.hpp found" || echo "❌ boost/random.hpp missing"
        # Check for boost libraries  
        ls -la /usr/lib/x86_64-linux-gnu/libboost* | head -10 || echo "No boost libraries found"

    - name: Install dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install cmake boost

    - name: Configure CMake
      run: |
        cmake -B build -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DBUILD_TESTS=ON -DBUILD_EXAMPLES=ON

    - name: Build
      run: |
        cmake --build build --config ${{ matrix.build_type }} --parallel

    - name: Run Tests
      run: |
        cd build
        ./tests/simple_test
        ./tests/unit_tests
        if [ -f "./tests/performance_tests" ]; then
          echo "Running performance tests..."
          timeout 60 ./tests/performance_tests || echo "Performance tests timed out or failed, continuing..."
        fi

    - name: Run Examples
      run: |
        cd build
        ./examples/basic_example
        ./examples/buffer_operations

  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y cmake build-essential cppcheck clang-tidy
        sudo apt-get install -y libboost-dev libboost-thread-dev libboost-system-dev

    - name: Run cppcheck
      run: |
        cppcheck --enable=all --error-exitcode=0 --suppress=missingIncludeSystem \
          --suppress=unusedFunction --suppress=unmatchedSuppression \
          --suppress=noExplicitConstructor --suppress=passedByValue \
          *.cpp *.h examples/*.cpp tests/*.cpp || echo "cppcheck completed with warnings"

    - name: Configure for clang-tidy
      run: |
        cmake -B build -DCMAKE_BUILD_TYPE=Debug -DCMAKE_EXPORT_COMPILE_COMMANDS=ON

    - name: Run clang-tidy
      run: |
        # Create a basic .clang-tidy config if it doesn't exist
        if [ ! -f .clang-tidy ]; then
          echo "Checks: '-*,readability-*,performance-*,modernize-*'" > .clang-tidy
        fi
        clang-tidy -p build \
          Buffer.cpp Random32.cpp Utils.cpp CompareResult.cpp || echo "clang-tidy completed with warnings"

  documentation:
    name: Build Documentation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y doxygen graphviz

    - name: Generate documentation
      run: |
        doxygen Doxyfile || echo "Doxygen config not found, skipping"

    - name: Upload documentation
      if: github.ref == 'refs/heads/main'
      uses: actions/upload-artifact@v4
      with:
        name: documentation
        path: docs/

  release:
    name: Create Release Artifacts
    runs-on: ubuntu-latest
    needs: [test, code-quality]
    if: github.event_name == 'release'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y cmake build-essential
        sudo apt-get install -y libboost-dev libboost-thread-dev libboost-system-dev

    - name: Build Release
      run: |
        cmake -B build -DCMAKE_BUILD_TYPE=Release
        cmake --build build --parallel

    - name: Package library
      run: |
        cd build
        cpack || echo "CPack not configured"

    - name: Create source archive
      run: |
        git archive --format=tar.gz --prefix=BufferLib-${{ github.ref_name }}/ HEAD > BufferLib-${{ github.ref_name }}-source.tar.gz

    - name: Upload release assets
      uses: actions/upload-artifact@v4
      with:
        name: release-artifacts
        path: |
          BufferLib-*.tar.gz
          build/libbuffer.a 